#!/usr/bin/env bash
# Summary: Print the latest installed or known version with the given prefix
# Usage: pyenv latest [-k|--known] [-q|--quiet] [-r|--nonreleased] <prefix>
#
#   -k/--known         Select from all known versions instead of installed
#   -q/--quiet         Do not print an error message on resolution failure
#   -r/--non-released  Include non-released versions if a released version
#                      is not available.

set -e
[ -n "$PYENV_DEBUG" ] && set -x

while [[ $# -gt 0 ]]
do
    case "$1" in
        -k|--known)
            FROM_KNOWN=1
            shift
            ;;
        -q|--quiet)
            QUIET=1
            shift
            ;;
        -r|--non-released)
            NONRELEASED=1
            shift
            ;;
        *)
            break
            ;;
    esac
done

prefix=$1
exitcode=0

IFS=$'\n'

    if [[ -z $FROM_KNOWN ]]; then
        DEFINITION_CANDIDATES=( $(pyenv-versions --bare --skip-envs) )
    else
        DEFINITION_CANDIDATES=( $(python-build --definitions ) )
    fi

    if printf '%s\n' "${DEFINITION_CANDIDATES[@]}" | grep -qxFe "$prefix"; then
        echo "$prefix"
        exit $exitcode;
    fi

    declare -A KEYED_DEFINITION_CANDIDATES
    shopt -s extglob
    IFS=.-
    for DEFINITION_CANDIDATE in "${DEFINITION_CANDIDATES[@]}"; do
        PARTS=( $DEFINITION_CANDIDATE )
        if [[ ${PARTS[0]} != "$prefix" ]]; then
            continue
        fi

        if [[ ${PARTS[-1]} =~ ^(dev|src|latest)|(a|b|rc)([0-9]+)$ ]]; then
            if [[ -z $NONRELEASED ]]; then continue; fi

            case "$BASH_REMATCH" in
                -src)
                    KEY=${DEFINITION_CANDIDATE%-src}.-1.
                    ;;
                rc*)
                    KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-2.${BASH_REMATCH[4]}
                    ;;
                b*)
                    KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-3.${BASH_REMATCH[4]}
                    ;;
                a*)
                    KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-4.${BASH_REMATCH[4]}
                    ;;
                -latest)
                    KEY=${DEFINITION_CANDIDATE%-latest}.-5.
                    ;;
                -dev)
                    KEY=${DEFINITION_CANDIDATE%-dev}.-6.
                    ;;
            esac
        fi

        case "$DEFINITION_CANDIDATE" in
            !("$prefix"[-.]*))
                continue
                ;;
            +([[:alnum:]])-)

        esac
        # if ! [[ $DEFINITION_CANDIDATE =~ ^"$prefix"[-.] ]]; then continue; fi

        # if [[ $DEFINITION_CANDIDATE =~ (-(dev|src|latest)|(a|b|rc)([0-9]+))$ ]]; then
        #     if [[ -z $NONRELEASED ]]; then continue; fi

        #     case "$BASH_REMATCH" in
        #         -src)
        #             KEY=${DEFINITION_CANDIDATE%-src}.-1.
        #             ;;
        #         rc*)
        #             KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-2.${BASH_REMATCH[4]}
        #             ;;
        #         b*)
        #             KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-3.${BASH_REMATCH[4]}
        #             ;;
        #         a*)
        #             KEY=${DEFINITION_CANDIDATE%"$BASH_REMATCH"}.-4.${BASH_REMATCH[4]}
        #             ;;
        #         -latest)
        #             KEY=${DEFINITION_CANDIDATE%-latest}.-5.
        #             ;;
        #         -dev)
        #             KEY=${DEFINITION_CANDIDATE%-dev}.-6.
        #             ;;
        #     esac
        # else
        #     KEY=${DEFINITION_CANDIDATE}..
        # fi

        # if [[ $KEY =~ ^([[:alnum:]]+)- ]]; then
        #     KEY=${KEY/-/.}..
        # else
        #     KEY=$KEY...
        # fi
        KEYED_DEFINITION_CANDIDATES[$KEY]=$DEFINITION_CANDIDATE
    done
    IFS=$'\n'

    KEY=(\
        $(printf '%s\n' "${!KEYED_DEFINITION_CANDIDATES[@]}" \
          | sort -t. -k1,1r -k 2,2nr -k 3,3nr -k4,4nr -k5,5nr -k6,6nr))

    if [[ -n $KEY ]]; then
        echo "${KEYED_DEFINITION_CANDIDATES[$KEY]}"
    else
        if [[ -z $QUIET ]]; then
            echo "pyenv: no $([[ -z $FROM_KNOWN ]] && echo installed || echo known) versions match the prefix \`$prefix'" >&2
        fi
        exitcode=1
    fi

exit $exitcode
